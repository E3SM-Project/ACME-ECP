! Test that interior is not changed by Halo fill operation.

@test( npes=[1,2,3])
subroutine testHaloInterior(this)
   use Halo_mod
   use pfunit_mod
   implicit none
   class (MpiTestMethod) :: this

   integer, parameter :: N = 2
   real :: a(N,0:N+1)
   integer :: p

   p = this%getProcessRank()
   a(:,1:N) = p
   a(:,0) = -1
   a(:,N+1) = -1

   call haloFill(a, this%getMpiCommunicator())

   @assertEqual(real(p), a(1,1))
   @assertEqual(real(p), a(2,1))
   @assertEqual(real(p), a(1,2))
   @assertEqual(real(p), a(2,2))

end subroutine testHaloInterior

! Test that exterior is filled with values from appropriate neighbor.
@test( npes=[1,3,4])
subroutine testHaloExterior(this)
   use Halo_mod
   use pfunit_mod
   implicit none
   class (MpiTestCase) :: this

   integer, parameter :: N = 2
   real :: a(N,0:N+1)
   integer :: p, leftNeighbor, rightNeighbor
   integer :: npes

   p = this%getProcessRank()

   a(:,1:N) = p
   a(:,0) = -1
   a(:,N+1) = -1
   npes = this%getNumProcesses()
   leftNeighbor = mod(p-1+npes,npes)
   rightNeighbor = mod(p+1, npes)

   call haloFill(a, this%getMpiCommunicator())

   @mpiAssertEqual(real(leftNeighbor), a(1,0))
   @mpiAssertEqual(real(leftNeighbor), a(2,0))

   @mpiAssertEqual(real(rightNeighbor), a(1,N+1))
   @mpiAssertEqual(real(rightNeighbor), a(2,N+1))

end subroutine testHaloExterior

! The next test is intentionally broken.
@test(ifdef=INCLUDE_INTENTIONALLY_BROKEN, npes=[3])
subroutine testBrokenHalo(this)
   use Halo_mod
   use pfunit_mod
   implicit none
   class (MpiTestCase) :: this

   integer :: p

   p = this%getProcessRank()

   if (p == 0 .or. p == 2) then
      call throw('Intentional broken test.')
   end if

end subroutine testBrokenHalo
   
