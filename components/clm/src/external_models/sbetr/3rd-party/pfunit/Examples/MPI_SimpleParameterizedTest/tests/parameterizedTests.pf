! An example of how to extend MPITestCase to support parameterized tests.

module Test_Parameters_mod
  use pfunit_mod

  @testParameter(contsructor = newTest)
  type, extends(MpiTestParameter) :: peCase
     integer :: p1
     integer :: p2
  contains
     procedure :: toString
  end type peCase

  @TestCase(constructor = newTest)
  type, extends(MPITestCase) :: Test_Parameters
     integer :: p1, p2
  end type Test_Parameters

!!$  interface Test_Parameters
!!$     module procedure newTest
!!$  end interface Test_Parameters

contains
  ! Constructor
  function newTest(testParameter) result (tst)
    type (Test_Parameters) :: tst
    type (peCase), intent(in) :: testParameter

    tst%p1 = testParameter%p1
    tst%p2 = testParameter%p2

  end function newTest

  function newPeCase(p1, p2)
     type (peCase) :: newPeCase
     integer, intent(in) :: p1, p2
     newPeCase%p1 = p1
     newPeCase%p2 = p2
  end function newPeCase

  ! Define the parameters over which to be cycled...
  function getParameters() result(params)
    type(peCase), allocatable :: params(:)

    
    params = [ &
         & newPeCase(p1=0,p2=1), &
         & newPeCase(p1=1,p2=2), &
         & newPeCase(p1=0,p2=2) &
         & ]


  end function getParameters

  ! Override the parent's version...
  function toString(this) result(string)
    class(pECase), intent(in) :: this
    character(:), allocatable :: string
    allocate(character(len=80) :: string)
    write(string,'("(npes,p1,p2)=(",i0,",",i0,",",i0,")")') &
         & this%getNumProcessesRequested(), this%p1, this%p2
   end function toString

  @test( ifdef=INCLUDE_INTENTIONALLY_BROKEN, npes=[1,3], testParameters={getParameters()} )
  subroutine testParamBroken(this)
! Use atParameters to set processor numbers to configure test...
    implicit none
    class (Test_Parameters), intent(inout) :: this

    integer :: p

    p = this%getProcessRank()
    associate( p1 => this%p1, p2 => this%p2 )
      if ( p .eq. p1 ) then
         @assertEqual(p,p1)
      end if
      if ( p .eq. p2 ) then
         @assertEqual(p,p2)
      end if
      ! Case 3 - Intentionally fail.
      if (p1 == 0 .and. p2 == 2) then
         if ( p .eq. 0 ) then
            @assertEqual(0,1,'Intentionally broken test.')
         ! Comment out the following for clarity: only announce the failure once.
         !else
         !   call throw('Intentional broken test.')
         end if
      end if
    end associate
  end   subroutine testParamBroken

end module Test_Parameters_mod

